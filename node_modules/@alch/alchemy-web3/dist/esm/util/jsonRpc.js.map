{"version":3,"file":"jsonRpc.js","sourceRoot":"","sources":["../../../src/util/jsonRpc.ts"],"names":[],"mappings":";AAoBA,MAAM,UAAU,kBAAkB;IAChC,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,OAAO,UAAC,MAAM,EAAE,MAAM,IAAK,OAAA,CAAC;QAC1B,MAAM,QAAA;QACN,MAAM,QAAA;QACN,OAAO,EAAE,KAAK;QACd,EAAE,EAAE,cAAY,MAAM,EAAI;KAC3B,CAAC,EALyB,CAKzB,CAAC;AACL,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,WAAgC,EAChC,WAA2B;IAF7B,iBAkCC;IA9BC,IAAM,IAAI,GAAiB,UAAO,MAAM,EAAE,MAAM;;;;wBAC7B,qBAAM,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,EAAA;;oBAAzD,QAAQ,GAAG,SAA8C;oBAC/D,IAAI,QAAQ,CAAC,KAAK,EAAE;wBAClB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;qBACzC;oBACD,sBAAO,QAAQ,CAAC,MAAM,EAAC;;;SACxB,CAAC;IAEF,SAAe,SAAS,CAAC,KAAkB;;;;;;wBACnC,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,EAAkB;gCAAhB,MAAM,YAAA,EAAE,MAAM,YAAA;4BACzC,OAAA,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC;wBAA3B,CAA2B,CAC5B,CAAC;wBACe,qBAAM,WAAW,CAAC,OAAO,CAAC,EAAA;;wBAArC,QAAQ,GAAG,SAA0B;wBAC3C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;4BACtB,OAAO,GAAG,QAAQ,CAAC,KAAK;gCAC5B,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO;gCACxB,CAAC,CAAC,sBAAsB,CAAC;4BAC3B,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;yBAC1B;wBACK,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,CAAC,CAAC,KAAK,EAAT,CAAS,CAAC,CAAC;wBACtD,IAAI,aAAa,EAAE;4BACjB,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,KAAM,CAAC,OAAO,CAAC,CAAC;yBAC/C;wBACD,0EAA0E;wBAC1E,sBAAO,QAAQ;iCACZ,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE,IAAK,OAAC,EAAE,CAAC,EAAa,GAAI,EAAE,CAAC,EAAa,EAArC,CAAqC,CAAC;iCACvD,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,EAAC;;;;KACzB;IAED,OAAO,EAAE,IAAI,MAAA,EAAE,SAAS,WAAA,EAAE,CAAC;AAC7B,CAAC;AAED,MAAM,UAAU,YAAY,CAAI,EAAa,EAAE,MAAS;IACtD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,IAAA,EAAE,MAAM,QAAA,EAAE,CAAC;AACxC,CAAC","sourcesContent":["import {\n  JsonRpcId,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SendFunction,\n} from \"../types\";\nimport { SendPayloadFunction } from \"../web3-adapter/sendPayload\";\n\nexport type PayloadFactory = (method: string, params?: any[]) => JsonRpcRequest;\n\nexport interface JsonRpcSenders {\n  send: SendFunction;\n  sendBatch(parts: BatchPart[]): Promise<any[]>;\n}\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport function makePayloadFactory(): PayloadFactory {\n  let nextId = 0;\n  return (method, params) => ({\n    method,\n    params,\n    jsonrpc: \"2.0\",\n    id: `alc-web3:${nextId++}`,\n  });\n}\n\nexport function makeSenders(\n  sendPayload: SendPayloadFunction,\n  makePayload: PayloadFactory,\n): JsonRpcSenders {\n  const send: SendFunction = async (method, params) => {\n    const response = await sendPayload(makePayload(method, params));\n    if (response.error) {\n      throw new Error(response.error.message);\n    }\n    return response.result;\n  };\n\n  async function sendBatch(parts: BatchPart[]): Promise<any[]> {\n    const payload = parts.map(({ method, params }) =>\n      makePayload(method, params),\n    );\n    const response = await sendPayload(payload);\n    if (!Array.isArray(response)) {\n      const message = response.error\n        ? response.error.message\n        : \"Batch request failed\";\n      throw new Error(message);\n    }\n    const errorResponse = response.find((r) => !!r.error);\n    if (errorResponse) {\n      throw new Error(errorResponse.error!.message);\n    }\n    // The ids are ascending numbers because that's what Payload Factories do.\n    return response\n      .sort((r1, r2) => (r1.id as number) - (r2.id as number))\n      .map((r) => r.result);\n  }\n\n  return { send, sendBatch };\n}\n\nexport function makeResponse<T>(id: JsonRpcId, result: T): JsonRpcResponse<T> {\n  return { jsonrpc: \"2.0\", id, result };\n}\n"]}