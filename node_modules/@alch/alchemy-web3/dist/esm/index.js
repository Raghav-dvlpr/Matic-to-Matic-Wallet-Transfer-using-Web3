import { __assign, __awaiter, __generator, __read, __spreadArray } from "tslib";
import Web3 from "web3";
import web3CoreSubscriptions from "web3-core-subscriptions";
import { decodeParameter } from "web3-eth-abi";
import { toHex } from "web3-utils";
import { formatBlock } from "./util/hex";
import { callWhenDone } from "./util/promises";
import { makeAlchemyContext } from "./web3-adapter/alchemyContext";
import { patchEnableCustomRPC } from "./web3-adapter/customRPC";
import { patchEthFeeHistoryMethod } from "./web3-adapter/eth_feeHistory";
import { patchEthMaxPriorityFeePerGasMethod } from "./web3-adapter/eth_maxPriorityFeePerGas";
var DEFAULT_MAX_RETRIES = 3;
var DEFAULT_RETRY_INTERVAL = 1000;
var DEFAULT_RETRY_JITTER = 250;
export var AssetTransfersCategory;
(function (AssetTransfersCategory) {
    AssetTransfersCategory["EXTERNAL"] = "external";
    AssetTransfersCategory["INTERNAL"] = "internal";
    AssetTransfersCategory["TOKEN"] = "token";
    AssetTransfersCategory["ERC20"] = "erc20";
    AssetTransfersCategory["ERC721"] = "erc721";
    AssetTransfersCategory["ERC1155"] = "erc1155";
})(AssetTransfersCategory || (AssetTransfersCategory = {}));
export var AssetTransfersOrder;
(function (AssetTransfersOrder) {
    AssetTransfersOrder["ASCENDING"] = "asc";
    AssetTransfersOrder["DESCENDING"] = "desc";
})(AssetTransfersOrder || (AssetTransfersOrder = {}));
export function createAlchemyWeb3(alchemyUrl, config) {
    var fullConfig = fillInConfigDefaults(config);
    var _a = makeAlchemyContext(alchemyUrl, fullConfig), provider = _a.provider, senders = _a.senders, setWriteProvider = _a.setWriteProvider;
    var alchemyWeb3 = new Web3(provider);
    alchemyWeb3.setProvider = function () {
        throw new Error("setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.");
    };
    alchemyWeb3.setWriteProvider = setWriteProvider;
    alchemyWeb3.alchemy = {
        getTokenAllowance: function (params, callback) {
            return callAlchemyMethod({
                senders: senders,
                callback: callback,
                method: "alchemy_getTokenAllowance",
                params: [params],
            });
        },
        getTokenBalances: function (address, contractAddresses, callback) {
            return callAlchemyMethod({
                senders: senders,
                callback: callback,
                method: "alchemy_getTokenBalances",
                params: [address, contractAddresses],
                processResponse: processTokenBalanceResponse,
            });
        },
        getTokenMetadata: function (address, callback) {
            return callAlchemyMethod({
                senders: senders,
                callback: callback,
                params: [address],
                method: "alchemy_getTokenMetadata",
            });
        },
        getAssetTransfers: function (params, callback) {
            return callAlchemyMethod({
                senders: senders,
                callback: callback,
                params: [
                    __assign(__assign({}, params), { fromBlock: params.fromBlock != null
                            ? formatBlock(params.fromBlock)
                            : undefined, toBlock: params.toBlock != null ? formatBlock(params.toBlock) : undefined, maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined }),
                ],
                method: "alchemy_getAssetTransfers",
            });
        },
        getNftMetadata: function (params, callback) {
            return callAlchemyMethod({
                senders: senders,
                callback: callback,
                params: [__assign({}, params)],
                method: "alchemy_getNftMetadata",
            });
        },
    };
    patchSubscriptions(alchemyWeb3);
    patchEnableCustomRPC(alchemyWeb3);
    patchEthFeeHistoryMethod(alchemyWeb3);
    patchEthMaxPriorityFeePerGasMethod(alchemyWeb3);
    return alchemyWeb3;
}
function fillInConfigDefaults(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.writeProvider, writeProvider = _c === void 0 ? getWindowProvider() : _c, _d = _b.maxRetries, maxRetries = _d === void 0 ? DEFAULT_MAX_RETRIES : _d, _e = _b.retryInterval, retryInterval = _e === void 0 ? DEFAULT_RETRY_INTERVAL : _e, _f = _b.retryJitter, retryJitter = _f === void 0 ? DEFAULT_RETRY_JITTER : _f;
    return { writeProvider: writeProvider, maxRetries: maxRetries, retryInterval: retryInterval, retryJitter: retryJitter };
}
function getWindowProvider() {
    return typeof window !== "undefined" ? window.ethereum : null;
}
function callAlchemyMethod(_a) {
    var _this = this;
    var senders = _a.senders, method = _a.method, params = _a.params, _b = _a.callback, callback = _b === void 0 ? noop : _b, _c = _a.processResponse, processResponse = _c === void 0 ? identity : _c;
    var promise = (function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, senders.send(method, params)];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, processResponse(result)];
            }
        });
    }); })();
    callWhenDone(promise, callback);
    return promise;
}
function processTokenBalanceResponse(rawResponse) {
    // Convert token balance fields from hex-string to decimal-string.
    var fixedTokenBalances = rawResponse.tokenBalances.map(function (balance) {
        return balance.tokenBalance != null
            ? __assign(__assign({}, balance), { tokenBalance: decodeParameter("uint256", balance.tokenBalance) }) : balance;
    });
    return __assign(__assign({}, rawResponse), { tokenBalances: fixedTokenBalances });
}
/**
 * Updates Web3's internal subscription architecture to also handle Alchemy
 * specific subscriptions.
 */
function patchSubscriptions(web3) {
    var eth = web3.eth;
    var oldSubscribe = eth.subscribe.bind(eth);
    eth.subscribe = (function (type) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        if (type === "alchemy_fullPendingTransactions" ||
            type === "alchemy_newFullPendingTransactions") {
            return suppressNoSubscriptionExistsWarning(function () {
                return oldSubscribe.apply(void 0, __spreadArray(["alchemy_newFullPendingTransactions"], __read(rest)));
            });
        }
        if (type === "alchemy_filteredNewFullPendingTransactions" ||
            type === "alchemy_filteredPendingTransactions" ||
            type === "alchemy_filteredFullPendingTransactions") {
            return suppressNoSubscriptionExistsWarning(function () {
                return oldSubscribe.apply(void 0, __spreadArray(["alchemy_filteredNewFullPendingTransactions"], __read(rest)));
            });
        }
        return oldSubscribe.apply(void 0, __spreadArray([type], __read(rest)));
    });
}
/**
 * VERY hacky wrapper to suppress a spurious warning when subscribing to an
 * Alchemy subscription that isn't built into Web3.
 */
function suppressNoSubscriptionExistsWarning(f) {
    var oldConsoleWarn = console.warn;
    console.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (typeof args[0] === "string" &&
            args[0].includes(" doesn't exist. Subscribing anyway.")) {
            return;
        }
        return oldConsoleWarn.apply(console, args);
    };
    try {
        return f();
    }
    finally {
        console.warn = oldConsoleWarn;
    }
}
/**
 * Another VERY hacky monkeypatch to make sure that we can take extra parameters to certain alchemy subscriptions
 * I hate doing this, but the other option is to fork web3-core and I think for now this is better
 */
var subscription = web3CoreSubscriptions.subscription;
var oldSubscriptionPrototypeValidateArgs = subscription.prototype._validateArgs;
subscription.prototype._validateArgs = function (args) {
    if ([
        "alchemy_filteredNewFullPendingTransactions",
        "alchemy_filteredPendingTransactions",
        "alchemy_filteredFullPendingTransactions",
    ].includes(this.subscriptionMethod)) {
        // This particular subscription type is allowed to have additional parameters
    }
    else {
        if ([
            "alchemy_fullPendingTransactions",
            "alchemy_newFullPendingTransactions",
        ].includes(this.subscriptionMethod)) {
            if (this.options.subscription) {
                this.options.subscription.subscriptionName = this.subscriptionMethod;
            }
        }
        var validator = oldSubscriptionPrototypeValidateArgs.bind(this);
        validator(args);
    }
};
function noop() {
    // Nothing.
}
function identity(x) {
    return x;
}
//# sourceMappingURL=index.js.map