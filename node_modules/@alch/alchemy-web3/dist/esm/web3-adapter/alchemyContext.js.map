{"version":3,"file":"alchemyContext.js","sourceRoot":"","sources":["../../../src/web3-adapter/alchemyContext.ts"],"names":[],"mappings":"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","sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { FullConfig, Provider } from \"../types\";\nimport {\n  JsonRpcSenders,\n  makePayloadFactory,\n  makeSenders,\n} from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makePayloadSender } from \"./sendPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\n\nconst NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport interface AlchemyContext {\n  provider: any;\n  senders: JsonRpcSenders;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport function makeAlchemyContext(\n  url: string,\n  config: FullConfig,\n): AlchemyContext {\n  const makePayload = makePayloadFactory();\n  if (/^https?:\\/\\//.test(url)) {\n    const alchemySend = makeHttpSender(url);\n    const { sendPayload, setWriteProvider } = makePayloadSender(\n      alchemySend,\n      config,\n    );\n    const senders = makeSenders(sendPayload, makePayload);\n    const provider = makeAlchemyHttpProvider(sendPayload);\n    return { provider, senders, setWriteProvider };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    const protocol = isAlchemyUrl(url) ? `alchemy-web3-${VERSION}` : undefined;\n    const ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor(),\n    });\n    const alchemySend = makeWebSocketSender(ws);\n    const { sendPayload, setWriteProvider } = makePayloadSender(\n      alchemySend,\n      config,\n    );\n    const senders = makeSenders(sendPayload, makePayload);\n    const provider = new AlchemyWebSocketProvider(ws, sendPayload, senders);\n    return { provider, senders, setWriteProvider };\n  } else {\n    throw new Error(\n      `Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: ${url}`,\n    );\n  }\n}\n\nfunction getWebSocketConstructor(): any {\n  return isNodeEnvironment()\n    ? (url: string, protocols?: string | string[] | undefined) =>\n        new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n          maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n          maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE,\n        })\n    : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\nfunction isAlchemyUrl(url: string): boolean {\n  return url.indexOf(\"alchemyapi.io\") >= 0;\n}\n"]}